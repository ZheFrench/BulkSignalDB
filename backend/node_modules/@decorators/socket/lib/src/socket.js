"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const di_1 = require("@decorators/di");
const meta_1 = require("./meta");
const middleware_1 = require("./middleware");
/**
 * Attaches controllers to IO server
 *
 * @param {SocketIO.Server} io
 * @param {Type[]} controllers
 */
function attachControllers(io, controllers) {
    io.use((socket, next) => middleware_1.middlewareHandler(middleware_1.IO_MIDDLEWARE)(io, socket, next));
    controllers.forEach((controller) => attachController(io, controller));
}
exports.attachControllers = attachControllers;
/**
 * Attach Controller
 *
 * @param {SocketIO.Server} IO
 * @param {Type} Controller
 */
function attachController(io, controller) {
    const instance = di_1.Container.get(controller);
    const meta = meta_1.getMeta(instance);
    const ioNS = io.of(meta.namespace);
    /**
     * Apply io based events
     */
    applyEvents(io, null, controller, meta_1.EventType.IO);
    /**
     * Apply local listeners (socket based)
     */
    ioNS.on('connection', (socket) => {
        /**
         * Apply all registered controller-based and event-based middlewares to socket
         */
        socket.use(socketMiddlewareHandler(io, socket, meta));
        /**
         * Apply socket based events
         */
        applyEvents(io, socket, controller, meta_1.EventType.Socket);
    });
}
/**
 * Handler for all registered controller based middleware
 *
 * @param {IO} io
 * @param {SocketIO.Socket} socket
 * @param {SocketMeta} meta
 */
function socketMiddlewareHandler(io, socket, meta) {
    return (packet, next) => {
        const [event, data] = packet;
        const args = [io, socket, { event, data }];
        /**
         * Find listener that serves this event
         */
        const listener = meta.listeners
            .find((lst) => lst.event === event);
        /**
         * And if listener exists, loop through controller middlewares
         * and after that event (registered in listener) middlewares
         */
        if (listener) {
            return middleware_1.executeMiddleware(meta.middleware, args)
                .then(() => middleware_1.executeMiddleware(listener.middleware, args))
                .then(() => next())
                .catch(err => next(err));
        }
        next();
    };
}
/**
 * Apply listeners to socket or io
 *
 * @param {SocketIO.Server|SocketIO.Namespace} io
 * @param {SocketIO.Socket} socket
 * @param {Type} controller
 * @param {EventType} type
 */
function applyEvents(io, socket, controller, type) {
    const instance = di_1.Container.get(controller);
    const meta = meta_1.getMeta(instance);
    const ioSock = socket || io;
    meta.listeners
        .filter((listener) => listener.type === type)
        .forEach((listener) => ioSock.on(listener.event, (...args) => {
        const methodName = listener.methodName;
        const newArgs = mapArguments(io, socket || args[0], meta.params[methodName], args);
        return instance[methodName].apply(instance, newArgs);
    }));
}
/**
 * Map parameters for new handler
 *
 * @param {SocketIO.Server|SocketIO.Namespace} io
 * @param {SocketIO.Socket} socket
 * @param {Param[]} params Meta parameters
 * @param {any[]} args Event handler arguments
 * @returns {Array} returns arguments array, or io and socket, event args by default
 */
function mapArguments(io, socket, params, args) {
    /**
     * if no parameters provided, return io and socket, and event arguments
     * (which came for default handler)
     */
    if (!params || !params.length) {
        return [io, socket, ...args];
    }
    /**
     * loop through all params and put them into correct order
     */
    return params
        .sort((p1, p2) => p1.index - p2.index)
        .map((param) => {
        switch (param.type) {
            case meta_1.ParameterType.IO: return getWrapper(param, io);
            case meta_1.ParameterType.Socket: return getWrapper(param, socket);
            case meta_1.ParameterType.Args: return getArgs(args);
            case meta_1.ParameterType.Ack: return getAck(args);
        }
    });
}
/**
 * Get ack callback function
 * @description extract callback function, it it exists
 *
 * @param {any[]} args Event arguments, passed to handler function
 */
function getAck(args) {
    const ackExists = typeof args[args.length - 1] === 'function';
    return ackExists ? args.pop() : noop;
}
/**
 * Get proper message data
 *
 * @param {any[]} args
 *
 * @returns {*}
 */
function getArgs(args) {
    return typeof args[args.length - 1] === 'function' ?
        args[args.length - 2] : args[args.length - 1];
}
/**
 * Get original socket or io server, or create instance of passed WrapperClass (data)
 *
 * @param {Param} item
 * @param {object} obj
 *
 * @returns {*}
 */
function getWrapper(item, obj) {
    return item.wrapper ? new item.wrapper(obj) : obj;
}
/**
 * Dummy empty function, to ensure that callback exists
 */
function noop() { }
//# sourceMappingURL=data:application/json;base64,