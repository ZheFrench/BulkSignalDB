"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const meta_1 = require("../meta");
/**
 * Listener decorator factory, creates listener decorator
 *
 * @param {EventType} type Listener type: io or socket
 * @param {string} event Event name
 * @param {Type[]} middleware Event middleware
 */
function makeDecorator(type, event, middleware) {
    return (target, methodName, descriptor) => {
        const meta = meta_1.getMeta(target);
        meta.listeners.push({ event, type, middleware, methodName });
        return descriptor;
    };
}
/**
 * Register **connection** event
 *
 * @see **io.on('connection', fn)**
 *
 * @param {Type[]} middleware Event middleware
 */
function Connection(middleware) {
    return makeDecorator(meta_1.EventType.IO, 'connection', middleware);
}
exports.Connection = Connection;
/**
 * @alias {Connection}
 */
exports.Connect = Connection;
/**
 * Registers global event
 *
 * @see **io.on**
 *
 * @param {string} event
 * @param {Type[]} middleware Event middleware
 */
function GlobalEvent(event, middleware) {
    return makeDecorator(meta_1.EventType.IO, event, middleware);
}
exports.GlobalEvent = GlobalEvent;
/**
 * Registers **disconnect** listener
 *
 * @see **socket.on('disconnect', fn)**
 *
 * @param {Type[]} middleware Event middleware
 */
function Disconnect(middleware) {
    return makeDecorator(meta_1.EventType.Socket, 'disconnect', middleware);
}
exports.Disconnect = Disconnect;
/**
 * Registers socket event
 *
 * @see **socket.on**
 *
 * @param {string} event
 * @param {Type[]} middleware Event middleware
 */
function Event(event, middleware) {
    return makeDecorator(meta_1.EventType.Socket, event, middleware);
}
exports.Event = Event;
;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXZlbnRzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL2RlY29yYXRvcnMvZXZlbnRzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsa0NBQXNFO0FBR3RFOzs7Ozs7R0FNRztBQUNILFNBQVMsYUFBYSxDQUFDLElBQWUsRUFBRSxLQUFhLEVBQUUsVUFBbUI7SUFDeEUsT0FBTyxDQUFDLE1BQW1CLEVBQUUsVUFBa0IsRUFBRSxVQUFnQixFQUFFLEVBQUU7UUFDbkUsTUFBTSxJQUFJLEdBQWUsY0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBRXpDLElBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLEVBQUUsS0FBSyxFQUFFLElBQUksRUFBRSxVQUFVLEVBQUUsVUFBVSxFQUFFLENBQUMsQ0FBQztRQUU3RCxPQUFPLFVBQVUsQ0FBQztJQUNwQixDQUFDLENBQUM7QUFDSixDQUFDO0FBRUQ7Ozs7OztHQU1HO0FBQ0gsU0FBZ0IsVUFBVSxDQUFDLFVBQW1CO0lBQzVDLE9BQU8sYUFBYSxDQUFDLGdCQUFTLENBQUMsRUFBRSxFQUFFLFlBQVksRUFBRSxVQUFVLENBQUMsQ0FBQztBQUMvRCxDQUFDO0FBRkQsZ0NBRUM7QUFDRDs7R0FFRztBQUNVLFFBQUEsT0FBTyxHQUFHLFVBQVUsQ0FBQztBQUVsQzs7Ozs7OztHQU9HO0FBQ0gsU0FBZ0IsV0FBVyxDQUFDLEtBQWEsRUFBRSxVQUFtQjtJQUM1RCxPQUFPLGFBQWEsQ0FBQyxnQkFBUyxDQUFDLEVBQUUsRUFBRSxLQUFLLEVBQUUsVUFBVSxDQUFDLENBQUM7QUFDeEQsQ0FBQztBQUZELGtDQUVDO0FBRUQ7Ozs7OztHQU1HO0FBQ0gsU0FBZ0IsVUFBVSxDQUFDLFVBQW1CO0lBQzVDLE9BQU8sYUFBYSxDQUFDLGdCQUFTLENBQUMsTUFBTSxFQUFFLFlBQVksRUFBRSxVQUFVLENBQUMsQ0FBQztBQUNuRSxDQUFDO0FBRkQsZ0NBRUM7QUFFRDs7Ozs7OztHQU9HO0FBQ0gsU0FBZ0IsS0FBSyxDQUFDLEtBQWEsRUFBRSxVQUFtQjtJQUN0RCxPQUFPLGFBQWEsQ0FBQyxnQkFBUyxDQUFDLE1BQU0sRUFBRSxLQUFLLEVBQUUsVUFBVSxDQUFDLENBQUM7QUFDNUQsQ0FBQztBQUZELHNCQUVDO0FBQUEsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGdldE1ldGEsIFNvY2tldENsYXNzLCBTb2NrZXRNZXRhLCBFdmVudFR5cGUgfSBmcm9tICcuLi9tZXRhJztcbmltcG9ydCB7IFR5cGUgfSBmcm9tICcuLi9taWRkbGV3YXJlJztcblxuLyoqXG4gKiBMaXN0ZW5lciBkZWNvcmF0b3IgZmFjdG9yeSwgY3JlYXRlcyBsaXN0ZW5lciBkZWNvcmF0b3JcbiAqXG4gKiBAcGFyYW0ge0V2ZW50VHlwZX0gdHlwZSBMaXN0ZW5lciB0eXBlOiBpbyBvciBzb2NrZXRcbiAqIEBwYXJhbSB7c3RyaW5nfSBldmVudCBFdmVudCBuYW1lXG4gKiBAcGFyYW0ge1R5cGVbXX0gbWlkZGxld2FyZSBFdmVudCBtaWRkbGV3YXJlXG4gKi9cbmZ1bmN0aW9uIG1ha2VEZWNvcmF0b3IodHlwZTogRXZlbnRUeXBlLCBldmVudDogc3RyaW5nLCBtaWRkbGV3YXJlPzogVHlwZVtdKSB7XG4gIHJldHVybiAodGFyZ2V0OiBTb2NrZXRDbGFzcywgbWV0aG9kTmFtZTogc3RyaW5nLCBkZXNjcmlwdG9yPzogYW55KSA9PiB7XG4gICAgY29uc3QgbWV0YTogU29ja2V0TWV0YSA9IGdldE1ldGEodGFyZ2V0KTtcblxuICAgIG1ldGEubGlzdGVuZXJzLnB1c2goeyBldmVudCwgdHlwZSwgbWlkZGxld2FyZSwgbWV0aG9kTmFtZSB9KTtcblxuICAgIHJldHVybiBkZXNjcmlwdG9yO1xuICB9O1xufVxuXG4vKipcbiAqIFJlZ2lzdGVyICoqY29ubmVjdGlvbioqIGV2ZW50XG4gKlxuICogQHNlZSAqKmlvLm9uKCdjb25uZWN0aW9uJywgZm4pKipcbiAqXG4gKiBAcGFyYW0ge1R5cGVbXX0gbWlkZGxld2FyZSBFdmVudCBtaWRkbGV3YXJlXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBDb25uZWN0aW9uKG1pZGRsZXdhcmU/OiBUeXBlW10pIHtcbiAgcmV0dXJuIG1ha2VEZWNvcmF0b3IoRXZlbnRUeXBlLklPLCAnY29ubmVjdGlvbicsIG1pZGRsZXdhcmUpO1xufVxuLyoqXG4gKiBAYWxpYXMge0Nvbm5lY3Rpb259XG4gKi9cbmV4cG9ydCBjb25zdCBDb25uZWN0ID0gQ29ubmVjdGlvbjtcblxuLyoqXG4gKiBSZWdpc3RlcnMgZ2xvYmFsIGV2ZW50XG4gKlxuICogQHNlZSAqKmlvLm9uKipcbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gZXZlbnRcbiAqIEBwYXJhbSB7VHlwZVtdfSBtaWRkbGV3YXJlIEV2ZW50IG1pZGRsZXdhcmVcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIEdsb2JhbEV2ZW50KGV2ZW50OiBzdHJpbmcsIG1pZGRsZXdhcmU/OiBUeXBlW10pIHtcbiAgcmV0dXJuIG1ha2VEZWNvcmF0b3IoRXZlbnRUeXBlLklPLCBldmVudCwgbWlkZGxld2FyZSk7XG59XG5cbi8qKlxuICogUmVnaXN0ZXJzICoqZGlzY29ubmVjdCoqIGxpc3RlbmVyXG4gKlxuICogQHNlZSAqKnNvY2tldC5vbignZGlzY29ubmVjdCcsIGZuKSoqXG4gKlxuICogQHBhcmFtIHtUeXBlW119IG1pZGRsZXdhcmUgRXZlbnQgbWlkZGxld2FyZVxuICovXG5leHBvcnQgZnVuY3Rpb24gRGlzY29ubmVjdChtaWRkbGV3YXJlPzogVHlwZVtdKSB7XG4gIHJldHVybiBtYWtlRGVjb3JhdG9yKEV2ZW50VHlwZS5Tb2NrZXQsICdkaXNjb25uZWN0JywgbWlkZGxld2FyZSk7XG59XG5cbi8qKlxuICogUmVnaXN0ZXJzIHNvY2tldCBldmVudFxuICpcbiAqIEBzZWUgKipzb2NrZXQub24qKlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBldmVudFxuICogQHBhcmFtIHtUeXBlW119IG1pZGRsZXdhcmUgRXZlbnQgbWlkZGxld2FyZVxuICovXG5leHBvcnQgZnVuY3Rpb24gRXZlbnQoZXZlbnQ6IHN0cmluZywgbWlkZGxld2FyZT86IFR5cGVbXSkge1xuICByZXR1cm4gbWFrZURlY29yYXRvcihFdmVudFR5cGUuU29ja2V0LCBldmVudCwgbWlkZGxld2FyZSk7XG59O1xuIl19