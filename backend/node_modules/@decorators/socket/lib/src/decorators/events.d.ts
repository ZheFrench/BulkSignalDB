import { SocketClass } from '../meta';
import { Type } from '../middleware';
/**
 * Register **connection** event
 *
 * @see **io.on('connection', fn)**
 *
 * @param {Type[]} middleware Event middleware
 */
export declare function Connection(middleware?: Type[]): (target: SocketClass, methodName: string, descriptor?: any) => any;
/**
 * @alias {Connection}
 */
export declare const Connect: typeof Connection;
/**
 * Registers global event
 *
 * @see **io.on**
 *
 * @param {string} event
 * @param {Type[]} middleware Event middleware
 */
export declare function GlobalEvent(event: string, middleware?: Type[]): (target: SocketClass, methodName: string, descriptor?: any) => any;
/**
 * Registers **disconnect** listener
 *
 * @see **socket.on('disconnect', fn)**
 *
 * @param {Type[]} middleware Event middleware
 */
export declare function Disconnect(middleware?: Type[]): (target: SocketClass, methodName: string, descriptor?: any) => any;
/**
 * Registers socket event
 *
 * @see **socket.on**
 *
 * @param {string} event
 * @param {Type[]} middleware Event middleware
 */
export declare function Event(event: string, middleware?: Type[]): (target: SocketClass, methodName: string, descriptor?: any) => any;
