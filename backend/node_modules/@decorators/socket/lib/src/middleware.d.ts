/// <reference types="socket.io" />
import { InjectionToken } from '@decorators/di';
/**
 * IO Middleware class registration DI token
 */
export declare const IO_MIDDLEWARE: InjectionToken;
export interface Type extends Function {
    new (...args: any[]): any;
}
export declare type NextFunction = (err?: Error) => void;
/**
 * Server Middleware class interface
 *
 * @export
 * @interface ServerMiddleware
 */
export interface ServerMiddleware {
    use(io: SocketIO.Server | SocketIO.Namespace, socket: SocketIO.Socket, next: NextFunction): void;
}
/**
 * Middleware class interface
 *
 * @export
 * @interface Middleware
 */
export interface Middleware {
    use(io: SocketIO.Server | SocketIO.Namespace, socket: SocketIO.Socket, args: any, next: NextFunction): void;
}
/**
 * Create request middleware handler that uses class or function provided as middleware
 *
 * @export
 * @param {Type | InjectionToken} middleware
 *
 * @returns {RequestHandler}
 */
export declare function middlewareHandler(middleware: Type | InjectionToken): (...args: any[]) => any;
/**
 * Loops through all registered middlewares
 *
 * @param {Type[]} middleware Array of middleware
 * @param {any[]} [args = []] Arguments to pass in
 *
 * @returns {Promise<*>}
 */
export declare function executeMiddleware(middleware: Type[], args?: any[]): Promise<any>;
