"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const di_1 = require("@decorators/di");
/**
 * IO Middleware class registration DI token
 */
exports.IO_MIDDLEWARE = new di_1.InjectionToken('IO_MIDDLEWARE');
/**
 * Create request middleware handler that uses class or function provided as middleware
 *
 * @export
 * @param {Type | InjectionToken} middleware
 *
 * @returns {RequestHandler}
 */
function middlewareHandler(middleware) {
    return function (...args) {
        const next = args[args.length - 1];
        let instance;
        try {
            instance = di_1.Container.get(middleware);
        }
        catch (_a) {
            try {
                instance = new middleware();
            }
            catch (_b) {
                instance = middleware;
            }
        }
        // first, assuming that middleware is a class, try to use it,
        // otherwise use it as a function
        const use = instance.use ?
            instance.use : instance;
        try {
            const result = use.apply(instance, args);
            // if result of execution is a promise, add additional listener to catch error
            if (result instanceof Promise) {
                result.catch(next);
            }
            return result;
        }
        catch (e) {
            return next(e);
        }
    };
}
exports.middlewareHandler = middlewareHandler;
/**
 * Loops through all registered middlewares
 *
 * @param {Type[]} middleware Array of middleware
 * @param {any[]} [args = []] Arguments to pass in
 *
 * @returns {Promise<*>}
 */
function executeMiddleware(middleware, args = []) {
    function iteratee(done, i = 0) {
        try {
            middlewareHandler(middleware[i])(...args, (err) => {
                if (err) {
                    return done(err);
                }
                if (i === middleware.length - 1) {
                    return done(null);
                }
                iteratee(done, ++i);
            });
        }
        catch (e) {
            done(e);
        }
    }
    return new Promise((resolve, reject) => {
        if (middleware === undefined || middleware.length === 0) {
            return resolve();
        }
        iteratee((err) => err ? reject(err) : resolve());
    });
}
exports.executeMiddleware = executeMiddleware;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWlkZGxld2FyZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9taWRkbGV3YXJlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsdUNBQTJEO0FBRTNEOztHQUVHO0FBQ1UsUUFBQSxhQUFhLEdBQUcsSUFBSSxtQkFBYyxDQUFDLGVBQWUsQ0FBQyxDQUFDO0FBcUNqRTs7Ozs7OztHQU9HO0FBQ0gsU0FBZ0IsaUJBQWlCLENBQUMsVUFBaUM7SUFDakUsT0FBTyxVQUFTLEdBQUcsSUFBVztRQUM1QixNQUFNLElBQUksR0FBaUIsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDLENBQUM7UUFDakQsSUFBSSxRQUE4QyxDQUFDO1FBRW5ELElBQUk7WUFDRixRQUFRLEdBQUcsY0FBUyxDQUFDLEdBQUcsQ0FBQyxVQUFVLENBQUMsQ0FBQztTQUN0QztRQUFDLFdBQU07WUFDTixJQUFJO2dCQUNGLFFBQVEsR0FBRyxJQUFLLFVBQW1CLEVBQUUsQ0FBQzthQUN2QztZQUFDLFdBQU07Z0JBQ04sUUFBUSxHQUFHLFVBQWlCLENBQUM7YUFDOUI7U0FDRjtRQUVELDZEQUE2RDtRQUM3RCxpQ0FBaUM7UUFDakMsTUFBTSxHQUFHLEdBQUksUUFBMEMsQ0FBQyxHQUFHLENBQUMsQ0FBQztZQUMxRCxRQUEwQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsUUFBZ0IsQ0FBQztRQUVyRSxJQUFJO1lBQ0YsTUFBTSxNQUFNLEdBQUcsR0FBRyxDQUFDLEtBQUssQ0FBQyxRQUFRLEVBQUUsSUFBSSxDQUFDLENBQUM7WUFFeEMsOEVBQThFO1lBQy9FLElBQUksTUFBTSxZQUFZLE9BQU8sRUFBRTtnQkFDN0IsTUFBTSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQzthQUNwQjtZQUVELE9BQU8sTUFBTSxDQUFDO1NBQ2Y7UUFBQyxPQUFPLENBQUMsRUFBRTtZQUNWLE9BQU8sSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO1NBQ2hCO0lBRUgsQ0FBQyxDQUFBO0FBQ0gsQ0FBQztBQWxDRCw4Q0FrQ0M7QUFFRDs7Ozs7OztHQU9HO0FBQ0gsU0FBZ0IsaUJBQWlCLENBQUMsVUFBa0IsRUFBRSxPQUFjLEVBQUU7SUFDcEUsU0FBUyxRQUFRLENBQUMsSUFBMEIsRUFBRSxDQUFDLEdBQUcsQ0FBQztRQUNqRCxJQUFJO1lBQ0YsaUJBQWlCLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxJQUFJLEVBQUUsQ0FBQyxHQUFHLEVBQUUsRUFBRTtnQkFDaEQsSUFBSSxHQUFHLEVBQUU7b0JBQ1AsT0FBTyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7aUJBQ2xCO2dCQUVELElBQUksQ0FBQyxLQUFLLFVBQVUsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxFQUFFO29CQUMvQixPQUFPLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztpQkFDbkI7Z0JBRUQsUUFBUSxDQUFDLElBQUksRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDO1lBQ3RCLENBQUMsQ0FBQyxDQUFDO1NBQ0o7UUFBQyxPQUFPLENBQUMsRUFBRTtZQUNWLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztTQUNUO0lBQ0gsQ0FBQztJQUVELE9BQU8sSUFBSSxPQUFPLENBQUMsQ0FBQyxPQUFPLEVBQUUsTUFBTSxFQUFFLEVBQUU7UUFDckMsSUFBSSxVQUFVLEtBQUssU0FBUyxJQUFJLFVBQVUsQ0FBQyxNQUFNLEtBQUssQ0FBQyxFQUFFO1lBQ3ZELE9BQU8sT0FBTyxFQUFFLENBQUM7U0FDbEI7UUFFRCxRQUFRLENBQUMsQ0FBQyxHQUFVLEVBQUUsRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFPLEVBQUUsQ0FBQyxDQUFDO0lBQzFELENBQUMsQ0FBQyxDQUFDO0FBQ0wsQ0FBQztBQTFCRCw4Q0EwQkMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb250YWluZXIsIEluamVjdGlvblRva2VuIH0gZnJvbSAnQGRlY29yYXRvcnMvZGknO1xuXG4vKipcbiAqIElPIE1pZGRsZXdhcmUgY2xhc3MgcmVnaXN0cmF0aW9uIERJIHRva2VuXG4gKi9cbmV4cG9ydCBjb25zdCBJT19NSURETEVXQVJFID0gbmV3IEluamVjdGlvblRva2VuKCdJT19NSURETEVXQVJFJyk7XG5cbmV4cG9ydCBpbnRlcmZhY2UgVHlwZSBleHRlbmRzIEZ1bmN0aW9uIHtcbiAgbmV3ICguLi5hcmdzOiBhbnlbXSk7XG59XG5cbmV4cG9ydCB0eXBlIE5leHRGdW5jdGlvbiA9IChlcnI/OiBFcnJvcikgPT4gdm9pZDtcblxuLyoqXG4gKiBTZXJ2ZXIgTWlkZGxld2FyZSBjbGFzcyBpbnRlcmZhY2VcbiAqXG4gKiBAZXhwb3J0XG4gKiBAaW50ZXJmYWNlIFNlcnZlck1pZGRsZXdhcmVcbiAqL1xuZXhwb3J0IGludGVyZmFjZSBTZXJ2ZXJNaWRkbGV3YXJlIHtcbiAgdXNlKFxuICAgIGlvOiBTb2NrZXRJTy5TZXJ2ZXIgfCBTb2NrZXRJTy5OYW1lc3BhY2UsXG4gICAgc29ja2V0OiBTb2NrZXRJTy5Tb2NrZXQsXG4gICAgbmV4dDogTmV4dEZ1bmN0aW9uXG4gICk6IHZvaWQ7XG59XG5cbi8qKlxuICogTWlkZGxld2FyZSBjbGFzcyBpbnRlcmZhY2VcbiAqXG4gKiBAZXhwb3J0XG4gKiBAaW50ZXJmYWNlIE1pZGRsZXdhcmVcbiAqL1xuZXhwb3J0IGludGVyZmFjZSBNaWRkbGV3YXJlIHtcbiAgdXNlKFxuICAgIGlvOiBTb2NrZXRJTy5TZXJ2ZXIgfCBTb2NrZXRJTy5OYW1lc3BhY2UsXG4gICAgc29ja2V0OiBTb2NrZXRJTy5Tb2NrZXQsXG4gICAgYXJnczogYW55LFxuICAgIG5leHQ6IE5leHRGdW5jdGlvblxuICApOiB2b2lkO1xufVxuXG4vKipcbiAqIENyZWF0ZSByZXF1ZXN0IG1pZGRsZXdhcmUgaGFuZGxlciB0aGF0IHVzZXMgY2xhc3Mgb3IgZnVuY3Rpb24gcHJvdmlkZWQgYXMgbWlkZGxld2FyZVxuICpcbiAqIEBleHBvcnRcbiAqIEBwYXJhbSB7VHlwZSB8IEluamVjdGlvblRva2VufSBtaWRkbGV3YXJlXG4gKlxuICogQHJldHVybnMge1JlcXVlc3RIYW5kbGVyfVxuICovXG5leHBvcnQgZnVuY3Rpb24gbWlkZGxld2FyZUhhbmRsZXIobWlkZGxld2FyZTogVHlwZSB8IEluamVjdGlvblRva2VuKSB7XG4gIHJldHVybiBmdW5jdGlvbiguLi5hcmdzOiBhbnlbXSk6IGFueSB7XG4gICAgY29uc3QgbmV4dDogTmV4dEZ1bmN0aW9uID0gYXJnc1thcmdzLmxlbmd0aCAtIDFdO1xuICAgIGxldCBpbnN0YW5jZTogTWlkZGxld2FyZSB8IFNlcnZlck1pZGRsZXdhcmUgfCBUeXBlO1xuXG4gICAgdHJ5IHtcbiAgICAgIGluc3RhbmNlID0gQ29udGFpbmVyLmdldChtaWRkbGV3YXJlKTtcbiAgICB9IGNhdGNoIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIGluc3RhbmNlID0gbmV3IChtaWRkbGV3YXJlIGFzIFR5cGUpKCk7XG4gICAgICB9IGNhdGNoIHtcbiAgICAgICAgaW5zdGFuY2UgPSBtaWRkbGV3YXJlIGFzIGFueTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBmaXJzdCwgYXNzdW1pbmcgdGhhdCBtaWRkbGV3YXJlIGlzIGEgY2xhc3MsIHRyeSB0byB1c2UgaXQsXG4gICAgLy8gb3RoZXJ3aXNlIHVzZSBpdCBhcyBhIGZ1bmN0aW9uXG4gICAgY29uc3QgdXNlID0gKGluc3RhbmNlIGFzIE1pZGRsZXdhcmUgfCBTZXJ2ZXJNaWRkbGV3YXJlKS51c2UgP1xuICAgICAgKGluc3RhbmNlIGFzIE1pZGRsZXdhcmUgfCBTZXJ2ZXJNaWRkbGV3YXJlKS51c2UgOiBpbnN0YW5jZSBhcyBUeXBlO1xuXG4gICAgdHJ5IHtcbiAgICAgIGNvbnN0IHJlc3VsdCA9IHVzZS5hcHBseShpbnN0YW5jZSwgYXJncyk7XG5cbiAgICAgICAvLyBpZiByZXN1bHQgb2YgZXhlY3V0aW9uIGlzIGEgcHJvbWlzZSwgYWRkIGFkZGl0aW9uYWwgbGlzdGVuZXIgdG8gY2F0Y2ggZXJyb3JcbiAgICAgIGlmIChyZXN1bHQgaW5zdGFuY2VvZiBQcm9taXNlKSB7XG4gICAgICAgIHJlc3VsdC5jYXRjaChuZXh0KTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICByZXR1cm4gbmV4dChlKTtcbiAgICB9XG5cbiAgfVxufVxuXG4vKipcbiAqIExvb3BzIHRocm91Z2ggYWxsIHJlZ2lzdGVyZWQgbWlkZGxld2FyZXNcbiAqXG4gKiBAcGFyYW0ge1R5cGVbXX0gbWlkZGxld2FyZSBBcnJheSBvZiBtaWRkbGV3YXJlXG4gKiBAcGFyYW0ge2FueVtdfSBbYXJncyA9IFtdXSBBcmd1bWVudHMgdG8gcGFzcyBpblxuICpcbiAqIEByZXR1cm5zIHtQcm9taXNlPCo+fVxuICovXG5leHBvcnQgZnVuY3Rpb24gZXhlY3V0ZU1pZGRsZXdhcmUobWlkZGxld2FyZTogVHlwZVtdLCBhcmdzOiBhbnlbXSA9IFtdKTogUHJvbWlzZTxhbnk+IHtcbiAgZnVuY3Rpb24gaXRlcmF0ZWUoZG9uZTogKGVycjogRXJyb3IpID0+IHZvaWQsIGkgPSAwKSB7XG4gICAgdHJ5IHtcbiAgICAgIG1pZGRsZXdhcmVIYW5kbGVyKG1pZGRsZXdhcmVbaV0pKC4uLmFyZ3MsIChlcnIpID0+IHtcbiAgICAgICAgaWYgKGVycikge1xuICAgICAgICAgIHJldHVybiBkb25lKGVycik7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoaSA9PT0gbWlkZGxld2FyZS5sZW5ndGggLSAxKSB7XG4gICAgICAgICAgcmV0dXJuIGRvbmUobnVsbCk7XG4gICAgICAgIH1cblxuICAgICAgICBpdGVyYXRlZShkb25lLCArK2kpO1xuICAgICAgfSk7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgZG9uZShlKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgIGlmIChtaWRkbGV3YXJlID09PSB1bmRlZmluZWQgfHwgbWlkZGxld2FyZS5sZW5ndGggPT09IDApIHtcbiAgICAgIHJldHVybiByZXNvbHZlKCk7XG4gICAgfVxuXG4gICAgaXRlcmF0ZWUoKGVycjogRXJyb3IpID0+IGVyciA/IHJlamVjdChlcnIpIDogcmVzb2x2ZSgpKTtcbiAgfSk7XG59XG4iXX0=