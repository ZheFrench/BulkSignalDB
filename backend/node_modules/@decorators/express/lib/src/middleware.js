"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.errorMiddlewareHandler = exports.ERROR_MIDDLEWARE = exports.middlewareHandler = void 0;
const di_1 = require("@decorators/di");
/**
 * Create request middleware handler that uses class or function provided as middleware
 *
 * @param {Type} middleware
 *
 * @returns {RequestHandler}
 */
function middlewareHandler(middleware) {
    return function (req, res, next) {
        try {
            return getMiddleware(middleware, [req, res, next]);
        }
        catch (error) {
            next(error);
        }
    };
}
exports.middlewareHandler = middlewareHandler;
/**
 * Error Middleware class registration DI token
 */
exports.ERROR_MIDDLEWARE = new di_1.InjectionToken('ERROR_MIDDLEWARE');
/**
 * Add error middleware to the app
 *
 * @returns {ErrorRequestHandler}
 */
function errorMiddlewareHandler() {
    return function (error, req, res, next) {
        try {
            return getMiddleware(exports.ERROR_MIDDLEWARE, [error, req, res, next]);
        }
        catch (_a) {
            next(error);
        }
    };
}
exports.errorMiddlewareHandler = errorMiddlewareHandler;
/**
 * Instantiate middleware and invoke it with arguments
 *
 * @param {InjectionToken | Type} middleware
 * @param {any[]} args
 */
function getMiddleware(middleware, args) {
    const next = args[args.length - 1]; // last parameter is always the next function
    let instance;
    try {
        // first, trying to get instance from the container
        instance = di_1.Container.get(middleware);
    }
    catch (_a) {
        try {
            // if container fails, trying to instantiate it
            instance = new middleware();
        }
        catch (_b) {
            // if instantiation fails, try to use it as is
            instance = middleware;
        }
    }
    // first, assuming that middleware is a class, try to use it,
    // otherwise use it as a function
    const result = instance.use ?
        instance.use.apply(instance, args) :
        instance.apply(instance, args);
    // if result of execution is a promise, add additional listener to catch error
    if (result instanceof Promise) {
        result.catch(e => next(e));
    }
    return result;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWlkZGxld2FyZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9taWRkbGV3YXJlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUNBLHVDQUEyRDtBQTBCM0Q7Ozs7OztHQU1HO0FBQ0gsU0FBZ0IsaUJBQWlCLENBQUMsVUFBZ0I7SUFDaEQsT0FBTyxVQUFTLEdBQVksRUFBRSxHQUFhLEVBQUUsSUFBa0I7UUFDN0QsSUFBSTtZQUNGLE9BQU8sYUFBYSxDQUFDLFVBQVUsRUFBRSxDQUFDLEdBQUcsRUFBRSxHQUFHLEVBQUUsSUFBSSxDQUFDLENBQUMsQ0FBQztTQUNwRDtRQUFDLE9BQU8sS0FBSyxFQUFFO1lBQ2QsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO1NBQ2I7SUFDSCxDQUFDLENBQUM7QUFDSixDQUFDO0FBUkQsOENBUUM7QUFFRDs7R0FFRztBQUNVLFFBQUEsZ0JBQWdCLEdBQUcsSUFBSSxtQkFBYyxDQUFDLGtCQUFrQixDQUFDLENBQUM7QUFFdkU7Ozs7R0FJRztBQUNILFNBQWdCLHNCQUFzQjtJQUNwQyxPQUFPLFVBQVMsS0FBWSxFQUFFLEdBQVksRUFBRSxHQUFhLEVBQUUsSUFBa0I7UUFDM0UsSUFBSTtZQUNGLE9BQU8sYUFBYSxDQUFDLHdCQUFnQixFQUFFLENBQUMsS0FBSyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsSUFBSSxDQUFDLENBQUMsQ0FBQztTQUNqRTtRQUFDLFdBQU07WUFDTixJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7U0FDYjtJQUNILENBQUMsQ0FBQztBQUNKLENBQUM7QUFSRCx3REFRQztBQUVEOzs7OztHQUtHO0FBQ0gsU0FBUyxhQUFhLENBQUMsVUFBaUMsRUFBRSxJQUFXO0lBQ25FLE1BQU0sSUFBSSxHQUFpQixJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLDZDQUE2QztJQUMvRixJQUFJLFFBQVEsQ0FBQztJQUViLElBQUk7UUFDRixtREFBbUQ7UUFDbkQsUUFBUSxHQUFHLGNBQVMsQ0FBQyxHQUFHLENBQUMsVUFBVSxDQUFDLENBQUM7S0FDdEM7SUFBQyxXQUFNO1FBQ04sSUFBSTtZQUNGLCtDQUErQztZQUMvQyxRQUFRLEdBQUcsSUFBSyxVQUFtQixFQUFFLENBQUM7U0FDdkM7UUFBQyxXQUFNO1lBQ04sOENBQThDO1lBQzlDLFFBQVEsR0FBRyxVQUFpQixDQUFDO1NBQzlCO0tBQ0Y7SUFFRCw2REFBNkQ7SUFDN0QsaUNBQWlDO0lBQ2pDLE1BQU0sTUFBTSxHQUFHLFFBQVEsQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUMxQixRQUF5QyxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsUUFBUSxFQUFFLElBQUksQ0FBQyxDQUFDLENBQUM7UUFDckUsUUFBaUIsQ0FBQyxLQUFLLENBQUMsUUFBUSxFQUFFLElBQUksQ0FBQyxDQUFDO0lBRTNDLDhFQUE4RTtJQUM5RSxJQUFJLE1BQU0sWUFBWSxPQUFPLEVBQUU7UUFDN0IsTUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0tBQzVCO0lBRUQsT0FBTyxNQUFNLENBQUM7QUFDaEIsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFJlcXVlc3QsIFJlc3BvbnNlLCBOZXh0RnVuY3Rpb24sIFJlcXVlc3RIYW5kbGVyLCBFcnJvclJlcXVlc3RIYW5kbGVyIH0gZnJvbSAnZXhwcmVzcyc7XG5pbXBvcnQgeyBDb250YWluZXIsIEluamVjdGlvblRva2VuIH0gZnJvbSAnQGRlY29yYXRvcnMvZGknO1xuXG5leHBvcnQgaW50ZXJmYWNlIFR5cGUgZXh0ZW5kcyBGdW5jdGlvbiB7XG4gIG5ldyAoLi4uYXJnczogYW55W10pO1xufVxuXG4vKipcbiAqIE1pZGRsZXdhcmUgY2xhc3MgaW50ZXJmYWNlXG4gKlxuICogQGV4cG9ydFxuICogQGludGVyZmFjZSBNaWRkbGV3YXJlXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgTWlkZGxld2FyZSB7XG4gIHVzZShyZXF1ZXN0OiBSZXF1ZXN0LCByZXNwb25zZTogUmVzcG9uc2UsIG5leHQ6IE5leHRGdW5jdGlvbik6IHZvaWQ7XG59XG5cbi8qKlxuICogRXJyb3IgbWlkZGxld2FyZSBpbnRlcmZhY2VcbiAqXG4gKiBAZXhwb3J0XG4gKiBAaW50ZXJmYWNlIEVycm9yTWlkZGxld2FyZVxuICovXG5leHBvcnQgaW50ZXJmYWNlIEVycm9yTWlkZGxld2FyZSB7XG4gIHVzZShlcnJvcjogYW55LCByZXF1ZXN0OiBSZXF1ZXN0LCByZXNwb25zZTogUmVzcG9uc2UsIG5leHQ6IE5leHRGdW5jdGlvbik6IHZvaWQ7XG59XG5cbi8qKlxuICogQ3JlYXRlIHJlcXVlc3QgbWlkZGxld2FyZSBoYW5kbGVyIHRoYXQgdXNlcyBjbGFzcyBvciBmdW5jdGlvbiBwcm92aWRlZCBhcyBtaWRkbGV3YXJlXG4gKlxuICogQHBhcmFtIHtUeXBlfSBtaWRkbGV3YXJlXG4gKlxuICogQHJldHVybnMge1JlcXVlc3RIYW5kbGVyfVxuICovXG5leHBvcnQgZnVuY3Rpb24gbWlkZGxld2FyZUhhbmRsZXIobWlkZGxld2FyZTogVHlwZSk6IFJlcXVlc3RIYW5kbGVyIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKHJlcTogUmVxdWVzdCwgcmVzOiBSZXNwb25zZSwgbmV4dDogTmV4dEZ1bmN0aW9uKTogYW55IHtcbiAgICB0cnkge1xuICAgICAgcmV0dXJuIGdldE1pZGRsZXdhcmUobWlkZGxld2FyZSwgW3JlcSwgcmVzLCBuZXh0XSk7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIG5leHQoZXJyb3IpO1xuICAgIH1cbiAgfTtcbn1cblxuLyoqXG4gKiBFcnJvciBNaWRkbGV3YXJlIGNsYXNzIHJlZ2lzdHJhdGlvbiBESSB0b2tlblxuICovXG5leHBvcnQgY29uc3QgRVJST1JfTUlERExFV0FSRSA9IG5ldyBJbmplY3Rpb25Ub2tlbignRVJST1JfTUlERExFV0FSRScpO1xuXG4vKipcbiAqIEFkZCBlcnJvciBtaWRkbGV3YXJlIHRvIHRoZSBhcHBcbiAqXG4gKiBAcmV0dXJucyB7RXJyb3JSZXF1ZXN0SGFuZGxlcn1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGVycm9yTWlkZGxld2FyZUhhbmRsZXIoKTogRXJyb3JSZXF1ZXN0SGFuZGxlciB7XG4gIHJldHVybiBmdW5jdGlvbihlcnJvcjogRXJyb3IsIHJlcTogUmVxdWVzdCwgcmVzOiBSZXNwb25zZSwgbmV4dDogTmV4dEZ1bmN0aW9uKTogdm9pZCB7XG4gICAgdHJ5IHtcbiAgICAgIHJldHVybiBnZXRNaWRkbGV3YXJlKEVSUk9SX01JRERMRVdBUkUsIFtlcnJvciwgcmVxLCByZXMsIG5leHRdKTtcbiAgICB9IGNhdGNoIHtcbiAgICAgIG5leHQoZXJyb3IpO1xuICAgIH1cbiAgfTtcbn1cblxuLyoqXG4gKiBJbnN0YW50aWF0ZSBtaWRkbGV3YXJlIGFuZCBpbnZva2UgaXQgd2l0aCBhcmd1bWVudHNcbiAqXG4gKiBAcGFyYW0ge0luamVjdGlvblRva2VuIHwgVHlwZX0gbWlkZGxld2FyZVxuICogQHBhcmFtIHthbnlbXX0gYXJnc1xuICovXG5mdW5jdGlvbiBnZXRNaWRkbGV3YXJlKG1pZGRsZXdhcmU6IEluamVjdGlvblRva2VuIHwgVHlwZSwgYXJnczogYW55W10pIHtcbiAgY29uc3QgbmV4dDogTmV4dEZ1bmN0aW9uID0gYXJnc1thcmdzLmxlbmd0aCAtIDFdOyAvLyBsYXN0IHBhcmFtZXRlciBpcyBhbHdheXMgdGhlIG5leHQgZnVuY3Rpb25cbiAgbGV0IGluc3RhbmNlO1xuXG4gIHRyeSB7XG4gICAgLy8gZmlyc3QsIHRyeWluZyB0byBnZXQgaW5zdGFuY2UgZnJvbSB0aGUgY29udGFpbmVyXG4gICAgaW5zdGFuY2UgPSBDb250YWluZXIuZ2V0KG1pZGRsZXdhcmUpO1xuICB9IGNhdGNoIHtcbiAgICB0cnkge1xuICAgICAgLy8gaWYgY29udGFpbmVyIGZhaWxzLCB0cnlpbmcgdG8gaW5zdGFudGlhdGUgaXRcbiAgICAgIGluc3RhbmNlID0gbmV3IChtaWRkbGV3YXJlIGFzIFR5cGUpKCk7XG4gICAgfSBjYXRjaCB7XG4gICAgICAvLyBpZiBpbnN0YW50aWF0aW9uIGZhaWxzLCB0cnkgdG8gdXNlIGl0IGFzIGlzXG4gICAgICBpbnN0YW5jZSA9IG1pZGRsZXdhcmUgYXMgYW55O1xuICAgIH1cbiAgfVxuXG4gIC8vIGZpcnN0LCBhc3N1bWluZyB0aGF0IG1pZGRsZXdhcmUgaXMgYSBjbGFzcywgdHJ5IHRvIHVzZSBpdCxcbiAgLy8gb3RoZXJ3aXNlIHVzZSBpdCBhcyBhIGZ1bmN0aW9uXG4gIGNvbnN0IHJlc3VsdCA9IGluc3RhbmNlLnVzZSA/XG4gICAgKGluc3RhbmNlIGFzIE1pZGRsZXdhcmUgfCBFcnJvck1pZGRsZXdhcmUpLnVzZS5hcHBseShpbnN0YW5jZSwgYXJncykgOlxuICAgIChpbnN0YW5jZSBhcyBUeXBlKS5hcHBseShpbnN0YW5jZSwgYXJncyk7XG5cbiAgLy8gaWYgcmVzdWx0IG9mIGV4ZWN1dGlvbiBpcyBhIHByb21pc2UsIGFkZCBhZGRpdGlvbmFsIGxpc3RlbmVyIHRvIGNhdGNoIGVycm9yXG4gIGlmIChyZXN1bHQgaW5zdGFuY2VvZiBQcm9taXNlKSB7XG4gICAgcmVzdWx0LmNhdGNoKGUgPT4gbmV4dChlKSk7XG4gIH1cblxuICByZXR1cm4gcmVzdWx0O1xufVxuIl19