"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Head = exports.Options = exports.Patch = exports.Delete = exports.Put = exports.Post = exports.Get = exports.All = void 0;
const meta_1 = require("../meta");
/**
 * Route decorator factory, creates decorator
 *
 * @param {string} method
 * @param {string} url
 * @param {Type[]} middleware
 */
function decoratorFactory(method, url, middleware = []) {
    return (target, key, descriptor) => {
        const meta = meta_1.getMeta(target);
        if (!meta.routes[key]) {
            meta.routes[key] = { method, url, middleware };
        }
        else {
            // Replace method and route but concatenate middlewares from previous route
            meta.routes[key] = { method, url, middleware: middleware.concat(meta.routes[key].middleware) };
        }
        return descriptor;
    };
}
/**
 * All routes
 *
 * Special-cased "all" method, applying the given route `path`,
 * middleware, and callback to _every_ HTTP method.
 *
 * @param {string} url
 * @param {Type[]} [middleware]
 */
function All(url, middleware) {
    return decoratorFactory('all', url, middleware);
}
exports.All = All;
/**
 * Get route
 *
 * @param {string} url
 * @param {Type[]} [middleware]
 */
function Get(url, middleware) {
    return decoratorFactory('get', url, middleware);
}
exports.Get = Get;
/**
 * Post route
 *
 * @param {string} url
 * @param {Type[]} [middleware]
 */
function Post(url, middleware) {
    return decoratorFactory('post', url, middleware);
}
exports.Post = Post;
/**
 * Put route
 *
 * @param {string} url
 * @param {Type[]} [middleware]
 */
function Put(url, middleware) {
    return decoratorFactory('put', url, middleware);
}
exports.Put = Put;
/**
 * Delete route
 *
 * @param {string} url
 * @param {Type[]} [middleware]
 */
function Delete(url, middleware) {
    return decoratorFactory('delete', url, middleware);
}
exports.Delete = Delete;
/**
 * Patch route
 *
 * @param {string} url
 * @param {Type[]} [middleware]
 */
function Patch(url, middleware) {
    return decoratorFactory('patch', url, middleware);
}
exports.Patch = Patch;
/**
 * Options route
 *
 * @param {string} url
 * @param {Type[]} [middleware]
 */
function Options(url, middleware) {
    return decoratorFactory('options', url, middleware);
}
exports.Options = Options;
/**
 * Head route
 *
 * @param {string} url
 * @param {Type[]} [middleware]
 */
function Head(url, middleware) {
    return decoratorFactory('head', url, middleware);
}
exports.Head = Head;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicm91dGUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvZGVjb3JhdG9ycy9yb3V0ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFBQSxrQ0FBK0M7QUFHL0M7Ozs7OztHQU1HO0FBQ0gsU0FBUyxnQkFBZ0IsQ0FBQyxNQUFjLEVBQUUsR0FBVyxFQUFFLGFBQXFCLEVBQUU7SUFDNUUsT0FBTyxDQUFDLE1BQVcsRUFBRSxHQUFXLEVBQUUsVUFBZSxFQUFFLEVBQUU7UUFDbkQsTUFBTSxJQUFJLEdBQWdCLGNBQU8sQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUUxQyxJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsRUFBRTtZQUNyQixJQUFJLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxHQUFHLEVBQUUsTUFBTSxFQUFFLEdBQUcsRUFBRSxVQUFVLEVBQUUsQ0FBQztTQUNoRDthQUFNO1lBQ0wsMkVBQTJFO1lBQzNFLElBQUksQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLEdBQUcsRUFBRSxNQUFNLEVBQUUsR0FBRyxFQUFFLFVBQVUsRUFBRSxVQUFVLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUMsVUFBVSxDQUFDLEVBQUUsQ0FBQztTQUNoRztRQUVELE9BQU8sVUFBVSxDQUFDO0lBQ3BCLENBQUMsQ0FBQztBQUNKLENBQUM7QUFFRDs7Ozs7Ozs7R0FRRztBQUNILFNBQWdCLEdBQUcsQ0FBQyxHQUFXLEVBQUUsVUFBbUI7SUFDbEQsT0FBTyxnQkFBZ0IsQ0FBQyxLQUFLLEVBQUUsR0FBRyxFQUFFLFVBQVUsQ0FBQyxDQUFDO0FBQ2xELENBQUM7QUFGRCxrQkFFQztBQUVEOzs7OztHQUtHO0FBQ0gsU0FBZ0IsR0FBRyxDQUFDLEdBQVcsRUFBRSxVQUFtQjtJQUNsRCxPQUFPLGdCQUFnQixDQUFDLEtBQUssRUFBRSxHQUFHLEVBQUUsVUFBVSxDQUFDLENBQUM7QUFDbEQsQ0FBQztBQUZELGtCQUVDO0FBRUQ7Ozs7O0dBS0c7QUFDSCxTQUFnQixJQUFJLENBQUMsR0FBVyxFQUFFLFVBQW1CO0lBQ25ELE9BQU8sZ0JBQWdCLENBQUMsTUFBTSxFQUFFLEdBQUcsRUFBRSxVQUFVLENBQUMsQ0FBQztBQUNuRCxDQUFDO0FBRkQsb0JBRUM7QUFFRDs7Ozs7R0FLRztBQUNILFNBQWdCLEdBQUcsQ0FBQyxHQUFXLEVBQUUsVUFBbUI7SUFDbEQsT0FBTyxnQkFBZ0IsQ0FBQyxLQUFLLEVBQUUsR0FBRyxFQUFFLFVBQVUsQ0FBQyxDQUFDO0FBQ2xELENBQUM7QUFGRCxrQkFFQztBQUVEOzs7OztHQUtHO0FBQ0gsU0FBZ0IsTUFBTSxDQUFDLEdBQVcsRUFBRSxVQUFtQjtJQUNyRCxPQUFPLGdCQUFnQixDQUFDLFFBQVEsRUFBRSxHQUFHLEVBQUUsVUFBVSxDQUFDLENBQUM7QUFDckQsQ0FBQztBQUZELHdCQUVDO0FBRUQ7Ozs7O0dBS0c7QUFDSCxTQUFnQixLQUFLLENBQUMsR0FBVyxFQUFFLFVBQW1CO0lBQ3BELE9BQU8sZ0JBQWdCLENBQUMsT0FBTyxFQUFFLEdBQUcsRUFBRSxVQUFVLENBQUMsQ0FBQztBQUNwRCxDQUFDO0FBRkQsc0JBRUM7QUFFRDs7Ozs7R0FLRztBQUNILFNBQWdCLE9BQU8sQ0FBQyxHQUFXLEVBQUUsVUFBbUI7SUFDdEQsT0FBTyxnQkFBZ0IsQ0FBQyxTQUFTLEVBQUUsR0FBRyxFQUFFLFVBQVUsQ0FBQyxDQUFDO0FBQ3RELENBQUM7QUFGRCwwQkFFQztBQUVEOzs7OztHQUtHO0FBQ0gsU0FBZ0IsSUFBSSxDQUFDLEdBQVcsRUFBRSxVQUFtQjtJQUNuRCxPQUFPLGdCQUFnQixDQUFDLE1BQU0sRUFBRSxHQUFHLEVBQUUsVUFBVSxDQUFDLENBQUM7QUFDbkQsQ0FBQztBQUZELG9CQUVDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRXhwcmVzc01ldGEsIGdldE1ldGEgfSBmcm9tICcuLi9tZXRhJztcbmltcG9ydCB7IFR5cGUgfSBmcm9tICcuLi9taWRkbGV3YXJlJztcblxuLyoqXG4gKiBSb3V0ZSBkZWNvcmF0b3IgZmFjdG9yeSwgY3JlYXRlcyBkZWNvcmF0b3JcbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gbWV0aG9kXG4gKiBAcGFyYW0ge3N0cmluZ30gdXJsXG4gKiBAcGFyYW0ge1R5cGVbXX0gbWlkZGxld2FyZVxuICovXG5mdW5jdGlvbiBkZWNvcmF0b3JGYWN0b3J5KG1ldGhvZDogc3RyaW5nLCB1cmw6IHN0cmluZywgbWlkZGxld2FyZTogVHlwZVtdID0gW10pIHtcbiAgcmV0dXJuICh0YXJnZXQ6IGFueSwga2V5OiBzdHJpbmcsIGRlc2NyaXB0b3I6IGFueSkgPT4ge1xuICAgIGNvbnN0IG1ldGE6IEV4cHJlc3NNZXRhID0gZ2V0TWV0YSh0YXJnZXQpO1xuXG4gICAgaWYgKCFtZXRhLnJvdXRlc1trZXldKSB7XG4gICAgICBtZXRhLnJvdXRlc1trZXldID0geyBtZXRob2QsIHVybCwgbWlkZGxld2FyZSB9O1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBSZXBsYWNlIG1ldGhvZCBhbmQgcm91dGUgYnV0IGNvbmNhdGVuYXRlIG1pZGRsZXdhcmVzIGZyb20gcHJldmlvdXMgcm91dGVcbiAgICAgIG1ldGEucm91dGVzW2tleV0gPSB7IG1ldGhvZCwgdXJsLCBtaWRkbGV3YXJlOiBtaWRkbGV3YXJlLmNvbmNhdChtZXRhLnJvdXRlc1trZXldLm1pZGRsZXdhcmUpIH07XG4gICAgfVxuXG4gICAgcmV0dXJuIGRlc2NyaXB0b3I7XG4gIH07XG59XG5cbi8qKlxuICogQWxsIHJvdXRlc1xuICpcbiAqIFNwZWNpYWwtY2FzZWQgXCJhbGxcIiBtZXRob2QsIGFwcGx5aW5nIHRoZSBnaXZlbiByb3V0ZSBgcGF0aGAsXG4gKiBtaWRkbGV3YXJlLCBhbmQgY2FsbGJhY2sgdG8gX2V2ZXJ5XyBIVFRQIG1ldGhvZC5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gdXJsXG4gKiBAcGFyYW0ge1R5cGVbXX0gW21pZGRsZXdhcmVdXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBBbGwodXJsOiBzdHJpbmcsIG1pZGRsZXdhcmU/OiBUeXBlW10pIHtcbiAgcmV0dXJuIGRlY29yYXRvckZhY3RvcnkoJ2FsbCcsIHVybCwgbWlkZGxld2FyZSk7XG59XG5cbi8qKlxuICogR2V0IHJvdXRlXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IHVybFxuICogQHBhcmFtIHtUeXBlW119IFttaWRkbGV3YXJlXVxuICovXG5leHBvcnQgZnVuY3Rpb24gR2V0KHVybDogc3RyaW5nLCBtaWRkbGV3YXJlPzogVHlwZVtdKSB7XG4gIHJldHVybiBkZWNvcmF0b3JGYWN0b3J5KCdnZXQnLCB1cmwsIG1pZGRsZXdhcmUpO1xufVxuXG4vKipcbiAqIFBvc3Qgcm91dGVcbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gdXJsXG4gKiBAcGFyYW0ge1R5cGVbXX0gW21pZGRsZXdhcmVdXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBQb3N0KHVybDogc3RyaW5nLCBtaWRkbGV3YXJlPzogVHlwZVtdKSB7XG4gIHJldHVybiBkZWNvcmF0b3JGYWN0b3J5KCdwb3N0JywgdXJsLCBtaWRkbGV3YXJlKTtcbn1cblxuLyoqXG4gKiBQdXQgcm91dGVcbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gdXJsXG4gKiBAcGFyYW0ge1R5cGVbXX0gW21pZGRsZXdhcmVdXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBQdXQodXJsOiBzdHJpbmcsIG1pZGRsZXdhcmU/OiBUeXBlW10pIHtcbiAgcmV0dXJuIGRlY29yYXRvckZhY3RvcnkoJ3B1dCcsIHVybCwgbWlkZGxld2FyZSk7XG59XG5cbi8qKlxuICogRGVsZXRlIHJvdXRlXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IHVybFxuICogQHBhcmFtIHtUeXBlW119IFttaWRkbGV3YXJlXVxuICovXG5leHBvcnQgZnVuY3Rpb24gRGVsZXRlKHVybDogc3RyaW5nLCBtaWRkbGV3YXJlPzogVHlwZVtdKSB7XG4gIHJldHVybiBkZWNvcmF0b3JGYWN0b3J5KCdkZWxldGUnLCB1cmwsIG1pZGRsZXdhcmUpO1xufVxuXG4vKipcbiAqIFBhdGNoIHJvdXRlXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IHVybFxuICogQHBhcmFtIHtUeXBlW119IFttaWRkbGV3YXJlXVxuICovXG5leHBvcnQgZnVuY3Rpb24gUGF0Y2godXJsOiBzdHJpbmcsIG1pZGRsZXdhcmU/OiBUeXBlW10pIHtcbiAgcmV0dXJuIGRlY29yYXRvckZhY3RvcnkoJ3BhdGNoJywgdXJsLCBtaWRkbGV3YXJlKTtcbn1cblxuLyoqXG4gKiBPcHRpb25zIHJvdXRlXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IHVybFxuICogQHBhcmFtIHtUeXBlW119IFttaWRkbGV3YXJlXVxuICovXG5leHBvcnQgZnVuY3Rpb24gT3B0aW9ucyh1cmw6IHN0cmluZywgbWlkZGxld2FyZT86IFR5cGVbXSkge1xuICByZXR1cm4gZGVjb3JhdG9yRmFjdG9yeSgnb3B0aW9ucycsIHVybCwgbWlkZGxld2FyZSk7XG59XG5cbi8qKlxuICogSGVhZCByb3V0ZVxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSB1cmxcbiAqIEBwYXJhbSB7VHlwZVtdfSBbbWlkZGxld2FyZV1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIEhlYWQodXJsOiBzdHJpbmcsIG1pZGRsZXdhcmU/OiBUeXBlW10pIHtcbiAgcmV0dXJuIGRlY29yYXRvckZhY3RvcnkoJ2hlYWQnLCB1cmwsIG1pZGRsZXdhcmUpO1xufVxuIl19