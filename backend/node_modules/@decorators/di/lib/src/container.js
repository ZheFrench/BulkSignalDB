"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const store_1 = require("./store");
const errors_1 = require("./errors");
class Container {
    /**
     * Register new or replace providers
     *
     * @static
     * @param {Provider[]} providers
     */
    static provide(providers) {
        providers
            .filter((_provider) => _provider.useClass)
            .forEach((_provider) => this.registerClassProvider(_provider));
        providers
            .filter((_provider) => _provider.useFactory)
            .forEach((_provider) => this.registerFactoryProvider(_provider));
        providers
            .filter((_provider) => _provider.useValue)
            .forEach((_provider) => this.registerValueProvider(_provider));
    }
    /**
     * Get instance of injectable
     *
     * @template T
     * @param {Injectable} injectable
     * @returns {T}
     */
    static get(injectable) {
        const provider = store_1.Store.findProvider(injectable);
        if (provider === undefined) {
            throw new errors_1.MissingProviderError(injectable);
        }
        return this.resolveProvider(provider);
    }
    /**
     * Resolve provider
     *
     * @private
     * @param {StoreProvider} provider
     * @param {StoreProvider[]} [requesters = []] provider, that initiated di
     * @returns {*}
     */
    static resolveProvider(provider, requesters = []) {
        if (provider.value) {
            return provider.value;
        }
        const _requesters = requesters.concat([provider]);
        const deps = provider
            .deps.map((dep) => {
            const requesterProvider = _requesters.find((requester) => requester.id === dep.id);
            if (requesterProvider) {
                throw new errors_1.RecursiveProviderError(_requesters, requesterProvider);
            }
            const depService = store_1.Store.findProvider(dep.id);
            if (!depService && !dep.optional) {
                throw new errors_1.MissingProviderError(provider, dep);
            }
            if (!depService && dep.optional) {
                return null;
            }
            return this.resolveProvider(depService, _requesters);
        });
        provider.value = provider.factory ?
            provider.factory(...deps) : new provider.type(...deps);
        return provider.value;
    }
    /**
     * Register class provider
     *
     * @private
     * @static
     * @param {ClassProvider} provider
     */
    static registerClassProvider(provider) {
        const id = store_1.Store.providerId(provider.provide);
        const classProvider = store_1.Store.findProvider(provider.useClass);
        const deps = classProvider ? classProvider.deps : (provider.deps || [])
            .map((dep) => ({ id: store_1.Store.providerId(dep) }));
        store_1.Store.replaceProvider(provider.provide, { id, deps, type: provider.useClass });
    }
    /**
     * Register factory provider
     *
     * @private
     * @static
     * @param {FactoryProvider} provider
     */
    static registerFactoryProvider(provider) {
        const id = store_1.Store.providerId(provider.provide);
        const factory = provider.useFactory;
        const deps = (provider.deps || [])
            .map((dep) => ({ id: store_1.Store.providerId(dep) }));
        store_1.Store.replaceProvider(provider.provide, { id, factory, deps });
    }
    /**
     * Register value provider
     *
     * @private
     * @static
     * @param {ValueProvider} provider
     * @memberof Container
     */
    static registerValueProvider(provider) {
        const id = store_1.Store.providerId(provider.provide);
        const value = provider.useValue;
        store_1.Store.replaceProvider(provider.provide, { id, value });
    }
}
exports.Container = Container;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29udGFpbmVyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2NvbnRhaW5lci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQVdBLG1DQUFnQztBQUNoQyxxQ0FBd0U7QUFFeEU7SUFFRTs7Ozs7T0FLRztJQUNJLE1BQU0sQ0FBQyxPQUFPLENBQUMsU0FBcUI7UUFDekMsU0FBUzthQUNOLE1BQU0sQ0FBQyxDQUFDLFNBQXdCLEVBQUUsRUFBRSxDQUFDLFNBQVMsQ0FBQyxRQUFRLENBQUM7YUFDeEQsT0FBTyxDQUFDLENBQUMsU0FBd0IsRUFBRSxFQUFFLENBQUMsSUFBSSxDQUFDLHFCQUFxQixDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUM7UUFFaEYsU0FBUzthQUNOLE1BQU0sQ0FBQyxDQUFDLFNBQTBCLEVBQUUsRUFBRSxDQUFDLFNBQVMsQ0FBQyxVQUFVLENBQUM7YUFDNUQsT0FBTyxDQUFDLENBQUMsU0FBMEIsRUFBRSxFQUFFLENBQUMsSUFBSSxDQUFDLHVCQUF1QixDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUM7UUFFcEYsU0FBUzthQUNOLE1BQU0sQ0FBQyxDQUFDLFNBQXdCLEVBQUUsRUFBRSxDQUFDLFNBQVMsQ0FBQyxRQUFRLENBQUM7YUFDeEQsT0FBTyxDQUFDLENBQUMsU0FBd0IsRUFBRSxFQUFFLENBQUMsSUFBSSxDQUFDLHFCQUFxQixDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUM7SUFDbEYsQ0FBQztJQUVEOzs7Ozs7T0FNRztJQUNJLE1BQU0sQ0FBQyxHQUFHLENBQUksVUFBc0I7UUFDekMsTUFBTSxRQUFRLEdBQWtCLGFBQUssQ0FBQyxZQUFZLENBQUMsVUFBVSxDQUFDLENBQUM7UUFFL0QsRUFBRSxDQUFDLENBQUMsUUFBUSxLQUFLLFNBQVMsQ0FBQyxDQUFDLENBQUM7WUFDM0IsTUFBTSxJQUFJLDZCQUFvQixDQUFDLFVBQVUsQ0FBQyxDQUFDO1FBQzdDLENBQUM7UUFFRCxNQUFNLENBQUMsSUFBSSxDQUFD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LFFBQVEsQ0FBQyxVQUFVLENBQUM7UUFDN0MsTUFBTSxJQUFJLEdBQWlCLENBQUMsUUFBUSxDQUFDLElBQUksSUFBSSxFQUFFLENBQUM7YUFDN0MsR0FBRyxDQUFDLENBQUMsR0FBZSxFQUFFLEVBQUUsQ0FBQyxDQUFDLEVBQUUsRUFBRSxFQUFFLGFBQUssQ0FBQyxVQUFVLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7UUFFN0QsYUFBSyxDQUFDLGVBQWUsQ0FBQyxRQUFRLENBQUMsT0FBTyxFQUFFLEVBQUUsRUFBRSxFQUFFLE9BQU8sRUFBRSxJQUFJLEVBQUUsQ0FBQyxDQUFBO0lBQ2hFLENBQUM7SUFFRDs7Ozs7OztPQU9HO0lBQ0ssTUFBTSxDQUFDLHFCQUFxQixDQUFDLFFBQXVCO1FBQzFELE1BQU0sRUFBRSxHQUFpQixhQUFLLENBQUMsVUFBVSxDQUFDLFFBQVEsQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUM1RCxNQUFNLEtBQUssR0FBUSxRQUFRLENBQUMsUUFBUSxDQUFDO1FBRXJDLGFBQUssQ0FBQyxlQUFlLENBQUMsUUFBUSxDQUFDLE9BQU8sRUFBRSxFQUFFLEVBQUUsRUFBRSxLQUFLLEVBQUUsQ0FBQyxDQUFDO0lBQ3pELENBQUM7Q0FFRjtBQWpJRCw4QkFpSUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xuICBJbmplY3RhYmxlSWQsXG4gIFByb3ZpZGVyLFxuICBTdG9yZVByb3ZpZGVyLFxuICBDbGFzc1Byb3ZpZGVyLFxuICBGYWN0b3J5UHJvdmlkZXIsXG4gIFZhbHVlUHJvdmlkZXIsXG4gIERlcGVuZGVuY3ksXG4gIEluamVjdGFibGUsXG4gIEZhY3Rvcnlcbn0gZnJvbSAnLi90eXBlcyc7XG5pbXBvcnQgeyBTdG9yZSB9IGZyb20gJy4vc3RvcmUnO1xuaW1wb3J0IHsgTWlzc2luZ1Byb3ZpZGVyRXJyb3IsIFJlY3Vyc2l2ZVByb3ZpZGVyRXJyb3IgfSBmcm9tICcuL2Vycm9ycyc7XG5cbmV4cG9ydCBjbGFzcyBDb250YWluZXIge1xuXG4gIC8qKlxuICAgKiBSZWdpc3RlciBuZXcgb3IgcmVwbGFjZSBwcm92aWRlcnNcbiAgICpcbiAgICogQHN0YXRpY1xuICAgKiBAcGFyYW0ge1Byb3ZpZGVyW119IHByb3ZpZGVyc1xuICAgKi9cbiAgcHVibGljIHN0YXRpYyBwcm92aWRlKHByb3ZpZGVyczogUHJvdmlkZXJbXSkge1xuICAgIHByb3ZpZGVyc1xuICAgICAgLmZpbHRlcigoX3Byb3ZpZGVyOiBDbGFzc1Byb3ZpZGVyKSA9PiBfcHJvdmlkZXIudXNlQ2xhc3MpXG4gICAgICAuZm9yRWFjaCgoX3Byb3ZpZGVyOiBDbGFzc1Byb3ZpZGVyKSA9PiB0aGlzLnJlZ2lzdGVyQ2xhc3NQcm92aWRlcihfcHJvdmlkZXIpKTtcblxuICAgIHByb3ZpZGVyc1xuICAgICAgLmZpbHRlcigoX3Byb3ZpZGVyOiBGYWN0b3J5UHJvdmlkZXIpID0+IF9wcm92aWRlci51c2VGYWN0b3J5KVxuICAgICAgLmZvckVhY2goKF9wcm92aWRlcjogRmFjdG9yeVByb3ZpZGVyKSA9PiB0aGlzLnJlZ2lzdGVyRmFjdG9yeVByb3ZpZGVyKF9wcm92aWRlcikpO1xuXG4gICAgcHJvdmlkZXJzXG4gICAgICAuZmlsdGVyKChfcHJvdmlkZXI6IFZhbHVlUHJvdmlkZXIpID0+IF9wcm92aWRlci51c2VWYWx1ZSlcbiAgICAgIC5mb3JFYWNoKChfcHJvdmlkZXI6IFZhbHVlUHJvdmlkZXIpID0+IHRoaXMucmVnaXN0ZXJWYWx1ZVByb3ZpZGVyKF9wcm92aWRlcikpO1xuICB9XG5cbiAgLyoqXG4gICAqIEdldCBpbnN0YW5jZSBvZiBpbmplY3RhYmxlXG4gICAqXG4gICAqIEB0ZW1wbGF0ZSBUXG4gICAqIEBwYXJhbSB7SW5qZWN0YWJsZX0gaW5qZWN0YWJsZVxuICAgKiBAcmV0dXJucyB7VH1cbiAgICovXG4gIHB1YmxpYyBzdGF0aWMgZ2V0PFQ+KGluamVjdGFibGU6IEluamVjdGFibGUpOiBUIHtcbiAgICBjb25zdCBwcm92aWRlcjogU3RvcmVQcm92aWRlciA9IFN0b3JlLmZpbmRQcm92aWRlcihpbmplY3RhYmxlKTtcblxuICAgIGlmIChwcm92aWRlciA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICB0aHJvdyBuZXcgTWlzc2luZ1Byb3ZpZGVyRXJyb3IoaW5qZWN0YWJsZSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMucmVzb2x2ZVByb3ZpZGVyKHByb3ZpZGVyKVxuICB9XG5cbiAgLyoqXG4gICAqIFJlc29sdmUgcHJvdmlkZXJcbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtTdG9yZVByb3ZpZGVyfSBwcm92aWRlclxuICAgKiBAcGFyYW0ge1N0b3JlUHJvdmlkZXJbXX0gW3JlcXVlc3RlcnMgPSBbXV0gcHJvdmlkZXIsIHRoYXQgaW5pdGlhdGVkIGRpXG4gICAqIEByZXR1cm5zIHsqfVxuICAgKi9cbiAgcHJpdmF0ZSBzdGF0aWMgcmVzb2x2ZVByb3ZpZGVyKHByb3ZpZGVyOiBTdG9yZVByb3ZpZGVyLCByZXF1ZXN0ZXJzOiBTdG9yZVByb3ZpZGVyW10gPSBbXSk6IGFueSB7XG4gICAgaWYgKHByb3ZpZGVyLnZhbHVlKSB7XG4gICAgICByZXR1cm4gcHJvdmlkZXIudmFsdWU7XG4gICAgfVxuXG4gICAgY29uc3QgX3JlcXVlc3RlcnMgPSByZXF1ZXN0ZXJzLmNvbmNhdChbcHJvdmlkZXJdKTtcblxuICAgIGNvbnN0IGRlcHMgPSBwcm92aWRlclxuICAgICAgLmRlcHMubWFwKChkZXA6IERlcGVuZGVuY3kpID0+IHtcbiAgICAgICAgY29uc3QgcmVxdWVzdGVyUHJvdmlkZXI6IFN0b3JlUHJvdmlkZXIgPVxuICAgICAgICAgIF9yZXF1ZXN0ZXJzLmZpbmQoKHJlcXVlc3RlcjogU3RvcmVQcm92aWRlcikgPT4gcmVxdWVzdGVyLmlkID09PSBkZXAuaWQpO1xuXG4gICAgICAgIGlmIChyZXF1ZXN0ZXJQcm92aWRlcikge1xuICAgICAgICAgIHRocm93IG5ldyBSZWN1cnNpdmVQcm92aWRlckVycm9yKF9yZXF1ZXN0ZXJzLCByZXF1ZXN0ZXJQcm92aWRlcik7XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBkZXBTZXJ2aWNlOiBTdG9yZVByb3ZpZGVyID0gU3RvcmUuZmluZFByb3ZpZGVyKGRlcC5pZCk7XG5cbiAgICAgICAgaWYgKCFkZXBTZXJ2aWNlICYmICFkZXAub3B0aW9uYWwpIHtcbiAgICAgICAgICB0aHJvdyBuZXcgTWlzc2luZ1Byb3ZpZGVyRXJyb3IocHJvdmlkZXIsIGRlcCk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoIWRlcFNlcnZpY2UgJiYgZGVwLm9wdGlvbmFsKSB7XG4gICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdGhpcy5yZXNvbHZlUHJvdmlkZXIoZGVwU2VydmljZSwgX3JlcXVlc3RlcnMpO1xuICAgICAgfSk7XG5cbiAgICBwcm92aWRlci52YWx1ZSA9IHByb3ZpZGVyLmZhY3RvcnkgP1xuICAgICAgcHJvdmlkZXIuZmFjdG9yeSguLi5kZXBzKSA6IG5ldyBwcm92aWRlci50eXBlKC4uLmRlcHMpO1xuXG4gICAgcmV0dXJuIHByb3ZpZGVyLnZhbHVlO1xuICB9XG5cbiAgLyoqXG4gICAqIFJlZ2lzdGVyIGNsYXNzIHByb3ZpZGVyXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBzdGF0aWNcbiAgICogQHBhcmFtIHtDbGFzc1Byb3ZpZGVyfSBwcm92aWRlclxuICAgKi9cbiAgcHJpdmF0ZSBzdGF0aWMgcmVnaXN0ZXJDbGFzc1Byb3ZpZGVyKHByb3ZpZGVyOiBDbGFzc1Byb3ZpZGVyKTogdm9pZCB7XG4gICAgY29uc3QgaWQ6IEluamVjdGFibGVJZCA9IFN0b3JlLnByb3ZpZGVySWQocHJvdmlkZXIucHJvdmlkZSk7XG4gICAgY29uc3QgY2xhc3NQcm92aWRlcjogU3RvcmVQcm92aWRlciA9IFN0b3JlLmZpbmRQcm92aWRlcihwcm92aWRlci51c2VDbGFzcyk7XG4gICAgY29uc3QgZGVwczogRGVwZW5kZW5jeVtdID0gY2xhc3NQcm92aWRlciA/IGNsYXNzUHJvdmlkZXIuZGVwcyA6IChwcm92aWRlci5kZXBzIHx8IFtdKVxuICAgICAgLm1hcCgoZGVwOiBJbmplY3RhYmxlKSA9PiAoeyBpZDogU3RvcmUucHJvdmlkZXJJZChkZXApIH0pKTtcblxuICAgIFN0b3JlLnJlcGxhY2VQcm92aWRlcihwcm92aWRlci5wcm92aWRlLCB7IGlkLCBkZXBzLCB0eXBlOiBwcm92aWRlci51c2VDbGFzcyB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZWdpc3RlciBmYWN0b3J5IHByb3ZpZGVyXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBzdGF0aWNcbiAgICogQHBhcmFtIHtGYWN0b3J5UHJvdmlkZXJ9IHByb3ZpZGVyXG4gICAqL1xuICBwcml2YXRlIHN0YXRpYyByZWdpc3RlckZhY3RvcnlQcm92aWRlcihwcm92aWRlcjogRmFjdG9yeVByb3ZpZGVyKTogdm9pZCB7XG4gICAgY29uc3QgaWQ6IEluamVjdGFibGVJZCA9IFN0b3JlLnByb3ZpZGVySWQocHJvdmlkZXIucHJvdmlkZSk7XG4gICAgY29uc3QgZmFjdG9yeTogRmFjdG9yeSA9IHByb3ZpZGVyLnVzZUZhY3Rvcnk7XG4gICAgY29uc3QgZGVwczogRGVwZW5kZW5jeVtdID0gKHByb3ZpZGVyLmRlcHMgfHwgW10pXG4gICAgICAubWFwKChkZXA6IEluamVjdGFibGUpID0+ICh7IGlkOiBTdG9yZS5wcm92aWRlcklkKGRlcCkgfSkpO1xuXG4gICAgU3RvcmUucmVwbGFjZVByb3ZpZGVyKHByb3ZpZGVyLnByb3ZpZGUsIHsgaWQsIGZhY3RvcnksIGRlcHMgfSlcbiAgfVxuXG4gIC8qKlxuICAgKiBSZWdpc3RlciB2YWx1ZSBwcm92aWRlclxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAc3RhdGljXG4gICAqIEBwYXJhbSB7VmFsdWVQcm92aWRlcn0gcHJvdmlkZXJcbiAgICogQG1lbWJlcm9mIENvbnRhaW5lclxuICAgKi9cbiAgcHJpdmF0ZSBzdGF0aWMgcmVnaXN0ZXJWYWx1ZVByb3ZpZGVyKHByb3ZpZGVyOiBWYWx1ZVByb3ZpZGVyKTogdm9pZCB7XG4gICAgY29uc3QgaWQ6IEluamVjdGFibGVJZCA9IFN0b3JlLnByb3ZpZGVySWQocHJvdmlkZXIucHJvdmlkZSk7XG4gICAgY29uc3QgdmFsdWU6IGFueSA9IHByb3ZpZGVyLnVzZVZhbHVlO1xuXG4gICAgU3RvcmUucmVwbGFjZVByb3ZpZGVyKHByb3ZpZGVyLnByb3ZpZGUsIHsgaWQsIHZhbHVlIH0pO1xuICB9XG5cbn1cbiJdfQ==