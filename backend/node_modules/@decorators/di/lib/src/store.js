"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const reflector_1 = require("./reflector");
const injection_token_1 = require("./injection-token");
class Store {
    /**
     * Get provider id
     *
     * @static
     * @param {Injectable} injectable
     * @returns {InjectableId}
     */
    static providerId(injectable) {
        if (!injectable) {
            return null;
        }
        if (typeof injectable === 'string' || injectable instanceof injection_token_1.InjectionToken) {
            return injectable;
        }
        return reflector_1.Reflector.getId(injectable);
    }
    /**
     * Register provider
     *
     * @internal
     * @static
     * @param {Type} provider
     * @param {InjectableId} useId
     */
    static provider(type, args) {
        let provider = this.findProvider(type);
        if (provider === undefined) {
            provider = this.createProvider(type);
        }
        if (args === undefined) {
            reflector_1.Reflector.paramTypes(type)
                .forEach((param, index) => {
                if (!provider.deps[index] || !provider.deps[index].id) {
                    provider.deps[index] = { id: this.providerId(param) };
                }
            });
            return type;
        }
        const dep = provider.deps[args.index] || { id: null };
        provider.deps[args.index] = {
            id: args.injectable ? this.providerId(args.injectable) : dep.id,
            optional: args.optional || dep.optional
        };
        return type;
    }
    /**
     * Find stored provider
     *
     * @internal
     * @static
     * @param {Injectable} injectable
     *
     * @returns {StoreProvider}
     */
    static findProvider(injectable) {
        const id = this.providerId(injectable);
        return this.providers.find((provider) => provider.id === id);
    }
    /**
     * Replace stored provider wiht new provider
     *
     * @static
     * @param {Injectable} injectable
     * @param {StoreProvider} provider
     */
    static replaceProvider(injectable, provider) {
        const storeProvider = this.findProvider(injectable);
        const index = this.providers.indexOf(storeProvider);
        if (index !== -1) {
            this.providers[index] = provider;
        }
        else {
            this.providers.push(provider);
        }
    }
    /**
     * Create and store provider
     *
     * @internal
     * @static
     * @param {Injectable} injectable
     *
     * @returns {StoreProvider}
     */
    static createProvider(type) {
        const id = reflector_1.Reflector.setId(type);
        const storeProvider = { id, type, deps: [] };
        this.providers.push(storeProvider);
        return storeProvider;
    }
}
Store.providers = [];
exports.Store = Store;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3RvcmUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvc3RvcmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFDQSwyQ0FBd0M7QUFDeEMsdURBQW1EO0FBRW5EO0lBR0U7Ozs7OztPQU1HO0lBQ0ksTUFBTSxDQUFDLFVBQVUsQ0FBQyxVQUFzQjtRQUM3QyxFQUFFLENBQUMsQ0FBQyxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUM7WUFDaEIsTUFBTSxDQUFDLElBQUksQ0FBQztRQUNkLENBQUM7UUFFRCxFQUFFLENBQUMsQ0FBQyxPQUFPLFVBQVUsS0FBSyxRQUFRLElBQUksVUFBVSxZQUFZLGdDQUFjLENBQUMsQ0FBQyxDQUFDO1lBQzNFLE1BQU0sQ0FBQyxVQUFVLENBQUM7UUFDcEIsQ0FBQztRQUVELE1BQU0sQ0FBQyxxQkFBUyxDQUFDLEtBQUssQ0FBQyxVQUFVLENBQUMsQ0FBQztJQUNyQyxDQUFDO0lBRUQ7Ozs7Ozs7T0FPRztJQUNJLE1BQU0sQ0FBQyxRQUFRLENBQUMsSUFBVSxFQUFFLElBQXlDO1FBQzFFLElBQUksUUFBUSxHQUFrQixJQUFJLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQyxDQUFDO1FBRXRELEVBQUUsQ0FBQyxDQUFDLFFBQVEsS0FBSyxTQUFTLENBQUMsQ0FBQyxDQUFDO1lBQzNCLFFBQVEsR0FBRyxJQUFJLENBQUMsY0FBYyxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQ3ZDLENBQUM7UUFFRCxFQUFFLENBQUMsQ0FBQyxJQUFJLEtBQUssU0FBUyxDQUFDLENBQUMsQ0FBQztZQUN2QixxQkFBUyxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUM7aUJBQ3ZCLE9BQU8sQ0FBQyxDQUFDLEtBQWlCLEVBQUUsS0FBYSxFQUFFLEVBQUU7Z0JBQzVDLEVBQUUsQ0FBQyxDQUFDLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztvQkFDdEQsUUFBUSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsR0FBRyxFQUFFLEVBQUUsRUFBRSxJQUFJLENBQUMsVUFBVSxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUM7Z0JBQ3hELENBQUM7WUFDSCxDQUFDLENBQUMsQ0FBQztZQUVMLE1BQU0sQ0FBQyxJQUFJLENBQUM7UUFDZCxDQUFDO1FBRUQsTUFBTSxHQUFHLEdBQWUsUUFBUSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksRUFBRSxFQUFFLEVBQUUsSUFBSSxFQUFFLENBQUM7UUFFbEUsUUFBUSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLEdBQUc7WUFDMUIsRUFBRSxFQUFFLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsRUFBRTtZQUMvRCxRQUFRLEVBQUUsSUFBSSxDQUFDLFFBQVEsSUFBSSxHQUFHLENBQUMsUUFBUTtTQUN4QyxDQUFDO1FBRUYsTUFBTSxDQUFDLElBQUksQ0FBQztJQUNkLENBQUM7SUFFRDs7Ozs7Ozs7T0FRRztJQUNJLE1BQU0sQ0FBQyxZQUFZLENBQUMsVUFBc0I7UUFDL0MsTUFBTSxFQUFFLEdBQWlCLElBQUksQ0FBQyxVQUFVLENBQUMsVUFBVSxDQUFDLENBQUM7UUFFckQsTUFBTSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLENBQUMsUUFBdUIsRUFBRSxFQUFFLENBQUMsUUFBUSxDQUFDLEVBQUUsS0FBSyxFQUFFLENBQUMsQ0FBQztJQUM5RSxDQUFDO0lBRUQ7Ozs7OztPQU1HO0lBQ0ksTUFBTSxDQUFDLGVBQWUsQ0FBQyxVQUFzQixFQUFFLFFBQXVCO1FBQzNFLE1BQU0sYUFBYSxHQUFrQixJQUFJLENBQUMsWUFBWSxDQUFDLFVBQVUsQ0FBQyxDQUFDO1FBQ25FLE1BQU0sS0FBSyxHQUFXLElBQUksQ0FBQyxTQUFTLENBQUMsT0FBTyxDQUFDLGFBQWEsQ0FBQyxDQUFDO1FBRTVELEVBQUUsQ0FBQyxDQUFDLEtBQUssS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDakIsSUFBSSxDQUFDLFNBQVMsQ0FBQyxLQUFLLENBQUMsR0FBRyxRQUFRLENBQUM7UUFDbkMsQ0FBQztRQUFDLElBQUksQ0FBQyxDQUFDO1lBQ04sSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUM7UUFDaEMsQ0FBQztJQUNILENBQUM7SUFFRDs7Ozs7Ozs7T0FRRztJQUNLLE1BQU0sQ0FBQyxjQUFjLENBQUMsSUFBVTtRQUN0QyxNQUFNLEVBQUUsR0FBaUIscUJBQVMsQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDL0MsTUFBTSxhQUFhLEdBQWtCLEVBQUUsRUFBRSxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsRUFBRSxFQUFFLENBQUM7UUFFNUQsSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsYUFBYSxDQUFDLENBQUM7UUFFbkMsTUFBTSxDQUFDLGFBQWEsQ0FBQztJQUN2QixDQUFDOztBQTFHYSxlQUFTLEdBQW9CLEVBQUUsQ0FBQztBQURoRCxzQkE2R0MiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBTdG9yZVByb3ZpZGVyLCBUeXBlLCBJbmplY3RhYmxlLCBJbmplY3RhYmxlSWQsIERlcGVuZGVuY3kgfSBmcm9tICcuL3R5cGVzJztcbmltcG9ydCB7IFJlZmxlY3RvciB9IGZyb20gJy4vcmVmbGVjdG9yJztcbmltcG9ydCB7IEluamVjdGlvblRva2VuIH0gZnJvbSAnLi9pbmplY3Rpb24tdG9rZW4nO1xuXG5leHBvcnQgY2xhc3MgU3RvcmUge1xuICBwdWJsaWMgc3RhdGljIHByb3ZpZGVyczogU3RvcmVQcm92aWRlcltdID0gW107XG5cbiAgLyoqXG4gICAqIEdldCBwcm92aWRlciBpZFxuICAgKlxuICAgKiBAc3RhdGljXG4gICAqIEBwYXJhbSB7SW5qZWN0YWJsZX0gaW5qZWN0YWJsZVxuICAgKiBAcmV0dXJucyB7SW5qZWN0YWJsZUlkfVxuICAgKi9cbiAgcHVibGljIHN0YXRpYyBwcm92aWRlcklkKGluamVjdGFibGU6IEluamVjdGFibGUpOiBJbmplY3RhYmxlSWQge1xuICAgIGlmICghaW5qZWN0YWJsZSkge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuXG4gICAgaWYgKHR5cGVvZiBpbmplY3RhYmxlID09PSAnc3RyaW5nJyB8fCBpbmplY3RhYmxlIGluc3RhbmNlb2YgSW5qZWN0aW9uVG9rZW4pIHtcbiAgICAgIHJldHVybiBpbmplY3RhYmxlO1xuICAgIH1cblxuICAgIHJldHVybiBSZWZsZWN0b3IuZ2V0SWQoaW5qZWN0YWJsZSk7XG4gIH1cblxuICAvKipcbiAgICogUmVnaXN0ZXIgcHJvdmlkZXJcbiAgICpcbiAgICogQGludGVybmFsXG4gICAqIEBzdGF0aWNcbiAgICogQHBhcmFtIHtUeXBlfSBwcm92aWRlclxuICAgKiBAcGFyYW0ge0luamVjdGFibGVJZH0gdXNlSWRcbiAgICovXG4gIHB1YmxpYyBzdGF0aWMgcHJvdmlkZXIodHlwZTogVHlwZSwgYXJncz86IHsgaW5qZWN0YWJsZT8sIG9wdGlvbmFsPywgaW5kZXg/IH0pOiBUeXBlIHtcbiAgICBsZXQgcHJvdmlkZXI6IFN0b3JlUHJvdmlkZXIgPSB0aGlzLmZpbmRQcm92aWRlcih0eXBlKTtcblxuICAgIGlmIChwcm92aWRlciA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICBwcm92aWRlciA9IHRoaXMuY3JlYXRlUHJvdmlkZXIodHlwZSk7XG4gICAgfVxuXG4gICAgaWYgKGFyZ3MgPT09IHVuZGVmaW5lZCkge1xuICAgICAgUmVmbGVjdG9yLnBhcmFtVHlwZXModHlwZSlcbiAgICAgICAgLmZvckVhY2goKHBhcmFtOiBJbmplY3RhYmxlLCBpbmRleDogbnVtYmVyKSA9PiB7XG4gICAgICAgICAgaWYgKCFwcm92aWRlci5kZXBzW2luZGV4XSB8fCAhcHJvdmlkZXIuZGVwc1tpbmRleF0uaWQpIHtcbiAgICAgICAgICAgIHByb3ZpZGVyLmRlcHNbaW5kZXhdID0geyBpZDogdGhpcy5wcm92aWRlcklkKHBhcmFtKSB9O1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG5cbiAgICAgIHJldHVybiB0eXBlO1xuICAgIH1cblxuICAgIGNvbnN0IGRlcDogRGVwZW5kZW5jeSA9IHByb3ZpZGVyLmRlcHNbYXJncy5pbmRleF0gfHwgeyBpZDogbnVsbCB9O1xuXG4gICAgcHJvdmlkZXIuZGVwc1thcmdzLmluZGV4XSA9IHtcbiAgICAgIGlkOiBhcmdzLmluamVjdGFibGUgPyB0aGlzLnByb3ZpZGVySWQoYXJncy5pbmplY3RhYmxlKSA6IGRlcC5pZCxcbiAgICAgIG9wdGlvbmFsOiBhcmdzLm9wdGlvbmFsIHx8IGRlcC5vcHRpb25hbFxuICAgIH07XG5cbiAgICByZXR1cm4gdHlwZTtcbiAgfVxuXG4gIC8qKlxuICAgKiBGaW5kIHN0b3JlZCBwcm92aWRlclxuICAgKlxuICAgKiBAaW50ZXJuYWxcbiAgICogQHN0YXRpY1xuICAgKiBAcGFyYW0ge0luamVjdGFibGV9IGluamVjdGFibGVcbiAgICpcbiAgICogQHJldHVybnMge1N0b3JlUHJvdmlkZXJ9XG4gICAqL1xuICBwdWJsaWMgc3RhdGljIGZpbmRQcm92aWRlcihpbmplY3RhYmxlOiBJbmplY3RhYmxlKTogU3RvcmVQcm92aWRlciB7XG4gICAgY29uc3QgaWQ6IEluamVjdGFibGVJZCA9IHRoaXMucHJvdmlkZXJJZChpbmplY3RhYmxlKTtcblxuICAgIHJldHVybiB0aGlzLnByb3ZpZGVycy5maW5kKChwcm92aWRlcjogU3RvcmVQcm92aWRlcikgPT4gcHJvdmlkZXIuaWQgPT09IGlkKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXBsYWNlIHN0b3JlZCBwcm92aWRlciB3aWh0IG5ldyBwcm92aWRlclxuICAgKlxuICAgKiBAc3RhdGljXG4gICAqIEBwYXJhbSB7SW5qZWN0YWJsZX0gaW5qZWN0YWJsZVxuICAgKiBAcGFyYW0ge1N0b3JlUHJvdmlkZXJ9IHByb3ZpZGVyXG4gICAqL1xuICBwdWJsaWMgc3RhdGljIHJlcGxhY2VQcm92aWRlcihpbmplY3RhYmxlOiBJbmplY3RhYmxlLCBwcm92aWRlcjogU3RvcmVQcm92aWRlcik6IHZvaWQge1xuICAgIGNvbnN0IHN0b3JlUHJvdmlkZXI6IFN0b3JlUHJvdmlkZXIgPSB0aGlzLmZpbmRQcm92aWRlcihpbmplY3RhYmxlKTtcbiAgICBjb25zdCBpbmRleDogbnVtYmVyID0gdGhpcy5wcm92aWRlcnMuaW5kZXhPZihzdG9yZVByb3ZpZGVyKTtcblxuICAgIGlmIChpbmRleCAhPT0gLTEpIHtcbiAgICAgIHRoaXMucHJvdmlkZXJzW2luZGV4XSA9IHByb3ZpZGVyO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLnByb3ZpZGVycy5wdXNoKHByb3ZpZGVyKTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogQ3JlYXRlIGFuZCBzdG9yZSBwcm92aWRlclxuICAgKlxuICAgKiBAaW50ZXJuYWxcbiAgICogQHN0YXRpY1xuICAgKiBAcGFyYW0ge0luamVjdGFibGV9IGluamVjdGFibGVcbiAgICpcbiAgICogQHJldHVybnMge1N0b3JlUHJvdmlkZXJ9XG4gICAqL1xuICBwcml2YXRlIHN0YXRpYyBjcmVhdGVQcm92aWRlcih0eXBlOiBUeXBlKTogU3RvcmVQcm92aWRlciB7XG4gICAgY29uc3QgaWQ6IEluamVjdGFibGVJZCA9IFJlZmxlY3Rvci5zZXRJZCh0eXBlKTtcbiAgICBjb25zdCBzdG9yZVByb3ZpZGVyOiBTdG9yZVByb3ZpZGVyID0geyBpZCwgdHlwZSwgZGVwczogW10gfTtcblxuICAgIHRoaXMucHJvdmlkZXJzLnB1c2goc3RvcmVQcm92aWRlcik7XG5cbiAgICByZXR1cm4gc3RvcmVQcm92aWRlcjtcbiAgfVxuXG59XG4iXX0=